<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2017/11/07/Mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="Mongodb学习笔记（二）"><a href="#Mongodb学习笔记（二）" class="headerlink" title="Mongodb学习笔记（二）"></a>Mongodb学习笔记（二）</h1><hr>
<p><strong>关于Unicode字符串的一点说明</strong><br>你可能已经注意到，之前存入数据库的事常规的Python字符串，这与我们从数据库服务器里取回来的看起来不同（比如 u’Mike’ 而不是‘Mike’）。下面简单解释一下。 </p>
<p>MongoDB 以格式保存数据. BSON 字符串都是 UTF-8编码的， 所以PyMongo必须确保它保存的字符串值包含有效地 UTF-8数据.常规字符串 ( )都是有效的，可以不改变直接保存。Unicode 字符串( )就需要先编码成 UTF-8 格式.例子里的字符串显示为u’Mike’ 而不是 ‘Mike’是因为 PyMongo 会把每个BSON 字符串转换成 Python 的unicode 字符串, 而不是常规的 str.</p>
<p><strong>这个问题困扰了我好多天，其实并不用太担心，因为在python处理过程中它会依然正常处理</strong></p>
<p><strong>Mongodb查询返回值</strong><br>如果用find({})函数查询，则返回的是一个游标并不是字典，类似于list若要查看其中内容需用for循环遍历</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p = StockDB.get_collection(&apos;SHistA&apos;).find(&#123;&#125;,&#123;ticker:1,&quot;_id&quot;:0&#125;)</div><div class="line">for doc in p:</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>用find_one({})返回的则是字典</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/11/07/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>决策树以数据特征做划分，利用特征鲜明且完备的方式将数据划入不同的分类。是一种数值离散的聚类算法。  其中最主要的两个知识点是<strong>信息熵</strong>和<strong>信息增益</strong>。决策树根据所给数据特征的信息增益决定划分方式。  <a id="more"></a> </p>
<h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><p>选取对训练数据具有分类功能的特征  <strong>信息熵</strong>  在信息论和概率统计中对随记变量不确定性的度量  设X是一个取有限个值的离散随机变量，其概率分布：  </p>
<p>$$<br>P(X = x_i)=p_i, i = 1,2,···n<br>$$</p>
<p>则X的熵定义为：$H(X) =- \sum_{i=1}^{n}p_ilog(p_i)$log以2为底单位为比特（bit）  上式表明熵越大X的不确定度越大  若有二维随机变量(X,Y），其联合概率为：<br>$$<br>P(X = x_i,Y = y<em>j) = p</em>{ij} ， i = 1,2,3······n,j= 1,2,3······m<br>$$<br>  <strong>条件熵H(Y|X)</strong><br>表示在已知随机变量X的条件下随机变量Y的不确定度。<br>$$<br>H(Y|X) = \sum_{i = 1}^{n}p_iH(Y|X=x_i)<br>$$</p>
<p>$$<br>p_i = P(X = x_i),i = 1,2,3······n<br>$$<br> 在得到一批数据后可以通过数据估计，所得熵与条件熵称经验熵和经验条件熵<br><strong>信息增益</strong><br>表示在得知特征X的条件下，而使得Y的信息不确定性减少的程度。  特征 X对训练数据集Y的信息增益g(Y,X)，定义为集合Y的经验熵H(Y)与特征 X给定条件下Y的经验条件熵H(Y|X)之差<br>$$<br>g(Y,X) = H(Y) - H(Y|X)<br>$$<br> 因此对给定数据集和特征，信息增益越大的特征具有更强的分类能力  所以特征选择的方法：<strong>对数据集，计算其每个特征的信息增益，并比较它们的大小，选择信息增益最大的特征，并迭代进行</strong></p>
<h3 id="计算信息熵（香农熵）"><a href="#计算信息熵（香农熵）" class="headerlink" title="计算信息熵（香农熵）"></a>计算信息熵（香农熵）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 计算信息熵 </div><div class="line"><span class="selector-tag">def</span> <span class="selector-tag">CalcShannonEnt</span>(<span class="selector-tag">dataSet</span>) : # 计算数据集的输入个数 </div><div class="line">numEntries=len(dataSet) # []列表,&#123;&#125;元字典,()元组 </div><div class="line">labelCounts= &#123;&#125; # 创建存储标签的元字典 </div><div class="line"></div><div class="line"># 对数据集<span class="selector-tag">dataSet</span>中的每一行<span class="selector-tag">featVec</span>进行循环遍历 </div><div class="line"><span class="selector-tag">for</span> <span class="selector-tag">featVec</span> <span class="selector-tag">in</span> <span class="selector-tag">dataSet</span> : </div><div class="line">	currentLabels=featVec[-1] # currentLabels为featVec的最后一个元素 </div><div class="line"><span class="selector-tag">if</span> <span class="selector-tag">currentLabels</span> <span class="selector-tag">not</span> <span class="selector-tag">in</span> <span class="selector-tag">labelCounts</span><span class="selector-class">.keys</span>() : # 如果标签<span class="selector-tag">currentLabels</span>不在元字典对应的<span class="selector-tag">key</span>中</div><div class="line">	labelCounts[currentLabels]=0 # 将标签currentLabels放到字典中作为key，并将值赋为0</div><div class="line">	labelCounts[currentLabels]+=1 # 将currentLabels对应的值加1 </div><div class="line">shannonEnt=0.0 # 定义香农熵shannonEnt </div><div class="line"><span class="selector-tag">for</span> <span class="selector-tag">key</span> <span class="selector-tag">in</span> <span class="selector-tag">labelCounts</span> : # 遍历元字典<span class="selector-tag">labelCounts</span>中的<span class="selector-tag">key</span>，即标签		   </div><div class="line">	prob=float(labelCounts[key]) / numEntries # 计算每一个标签出现的频率，即概率</div><div class="line">	shannonEnt -=prob * log(prob, 2)# 根据信息熵公式计算每个标签信息熵并累加到shannonEnt上</div><div class="line"><span class="selector-tag">return</span> <span class="selector-tag">shannonEnt</span># 返回求得的整个标签对应的信息熵</div></pre></td></tr></table></figure>
<h3 id="计算条件熵选择最好的分类特征"><a href="#计算条件熵选择最好的分类特征" class="headerlink" title="计算条件熵选择最好的分类特征"></a>计算条件熵选择最好的分类特征</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">def chooseBestFeatureToSplit(dataSet): # 选择使分割后信息增益最大的特征，即对应的列 </div><div class="line">	numFeatures=len(dataSet[0]) - 1 # 获取特征的数目，从0开始，dataSet[0]是一条数据 </div><div class="line">	baseEntropy=CalcShannonEnt(dataSet) # 计算数据集当前的信息熵 </div><div class="line">	bestInfoGain=0.0 # 定义最大的信息增益 </div><div class="line">	bestFeature=-1 # 定义分割后信息增益最大的特征 </div><div class="line">	for i in range(numFeatures):# 遍历特征，即所有的列，计算每一列分割后的信息增益，找出信息增益最大的列 </div><div class="line">		featList=[example[i] for example in dataSet] # 取出第i列特征赋给featList </div><div class="line">		uniqueVals=set(featList) # 将特征对应的值放到一个集合中，使得特征列的数据具有唯一性 </div><div class="line">		newEntropy=0.0 # 定义分割后的信息熵 </div><div class="line">		for value in uniqueVals: # 遍历特征列的所有值(值是唯一的，重复值已经合并)，分割并计算信息增益 </div><div class="line">			subDataSet=splitDataSet(dataSet,i, value) # 按照特征列的每个值进行数据集分割 	</div><div class="line">			prob=len(subDataSet) / float(len(dataSet)) # 计算分割后的每个子集的概率(频率) </div><div class="line">			newEntropy+=prob * CalcShannonEnt(subDataSet) # 计算分割后的子集的信息熵并相加，得到分割后的整个数据集的信息熵 </div><div class="line">		infoGain=baseEntropy - newEntropy # 计算分割后的信息增益 </div><div class="line">		if (infoGain &gt; bestInfoGain): #如果分割后信息增益大于最好的信息增益 </div><div class="line">			bestInfoGain=infoGain # 将当前的分割的信息增益赋值为最好信息增益 </div><div class="line">			bestFeature=i # 分割的最好特征列赋为i </div><div class="line">	return bestFeature # 返回分割后信息增益最大的特征列</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/11/07/MongoDB%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="MongoDB-学习笔记（一）"><a href="#MongoDB-学习笔记（一）" class="headerlink" title="MongoDB 学习笔记（一）"></a>MongoDB 学习笔记（一）</h1><p>mongodb是一种非结构化存储数据库，它的数据是以文档为基础的在本地以二进制形式进行存储（Bosn），虽然有与sql查询语句相似的方式，但与SQL语法没有任何关系，更像是一种面相对象的编程，调用函数接口。<br> <a id="more"></a><br><strong>启动方式：</strong> </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">apple</span> @ admin [<span class="number">12</span>:<span class="number">05</span>:<span class="number">48</span>] $ mongodb //启动一个mongodb服务器（默认端口在<span class="number">27017</span>）,默认启动连接数据库为 ／data/db 若想指定数据库，需添加参数--dbpath </div><div class="line">例：  </div><div class="line"># apple @ admin [<span class="number">12</span>:<span class="number">05</span>:<span class="number">48</span>] $ mongod --dbpath ~/workspace/stock/mongodb/data/db  </div><div class="line"># apple @ admin [<span class="number">12</span>:<span class="number">05</span>:<span class="number">48</span>] $ mongo //启动一个命令行交互程序，是mongodbd的一个进程</div></pre></td></tr></table></figure>
<p>我在使用mongodb是主要用python编程进行数据录入和处理，因此使用mongodb提供的<strong>pymongo</strong>包在程序中连接数据库进行操作<br> <strong>连接数据库：</strong> </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">from</span> <span class="selector-tag">pymongo</span> <span class="selector-tag">import</span> <span class="selector-tag">MongoClient</span> </div><div class="line">client=MongoClient() //创建一个服务器进程，默认自动创建端口  </div><div class="line">db = client['STOCK'] //连接到数据库STOCK</div></pre></td></tr></table></figure>
<h2 id="常用数据库操作"><a href="#常用数据库操作" class="headerlink" title="常用数据库操作"></a>常用数据库操作</h2><p><strong>增：</strong><br>函数名：insert_one() 作用：用于插入一个文档  使用格式：db.get_collection(‘CollectionName’).insert_one({‘key’:’value’}) 函数名：insert_many() 作用：用于插入多个文档  使用格式：db.get_collection(‘CollectionName’).insert_many([  {‘key’: i }  ]for i in range(n)) </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Acoll=db['SEquA'] </div><div class="line">Aresult=Acoll.insert_many( [ &#123;</div><div class="line">    "<span class="selector-tag">ticker</span>": <span class="selector-tag">SA</span><span class="selector-attr">['ticker']</span><span class="selector-attr">[i]</span>, "<span class="selector-tag">secShortName</span>": <span class="selector-tag">SA</span><span class="selector-attr">['secShortName']</span><span class="selector-attr">[i]</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(<span class="selector-tag">len</span>(<span class="selector-tag">SA</span>))])</div></pre></td></tr></table></figure>
<p> <strong>查：</strong><br>函数名：find() 作用：查找所需要的文档  使用格式：db.get_collection(‘CollectionName’).find({‘key’:’value’})  其他使用方式查看：<a href="http://api.mongodb.com/python/current/api/pymongo/collection.html?_ga=1.224606170.1159885722.1489465777#pymongo.collection.Collection.find" target="_blank" rel="external">http://api.mongodb.com/python/current/api/pymongo/collection.html?_ga=1.224606170.1159885722.1489465777#pymongo.collection.Collection.find</a> </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ATicker=db.get_collection('SEquA').find( &#123;&#125;</div><div class="line"></div><div class="line">, &#123;</div><div class="line">    'ticker': 1, '_id':0</div><div class="line">&#125;</div><div class="line"></div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>注意：find()函数查找所返回的格式是dict,关于dict对象的操作方式自行查找</strong><br><strong>改：</strong><br>函数名：update() 作用：对指定文档进行更新和添加  使用格式：db.get_collection(‘CollectionName’).update({filter},{operation},  otherparameter…) </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.get_collection</span>("<span class="selector-tag">SConC</span>")<span class="selector-class">.update</span>( &#123;</div><div class="line">    "c_name": SConC['c_name'][i]</div><div class="line">&#125;</div><div class="line"></div><div class="line">, &#123;</div><div class="line">    "$set": &#123;</div><div class="line">        <span class="selector-tag">SConC</span><span class="selector-attr">['code']</span><span class="selector-attr">[i]</span>: &#123;</div><div class="line">            "name": SConC['name'][i]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">, upsert=True)</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
